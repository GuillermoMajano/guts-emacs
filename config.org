#+TITLE: Config General

* Initial Setup
** Base  
#+BEGIN_SRC emacs-lisp

    (require 'package)

      (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
		    ("org" . "https://orgmode.org/elpa/")
		   ("melpa" . "https://melpa.org/packages/")))

    (package-initialize)
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

      (require 'use-package)
      (setq use-package-always-ensure t)

    (setq backup-directory-alist `(("." . "~/.saves")))

    (setq skeleton-pair t)
    (global-set-key "[" 'skeleton-pair-insert-maybe)
    (global-set-key "(" 'skeleton-pair-insert-maybe)
    (global-set-key "{" 'skeleton-pair-insert-maybe)
    (global-set-key "'" 'skeleton-pair-insert-maybe)
    (global-set-key "\"" 'skeleton-pair-insert-maybe)
     (global-set-key "<" 'skeleton-pair-insert-maybe)

  (add-to-list 'load-path (concat user-emacs-directory "elisp"))

#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp

  (use-package counsel
      :bind
      ("M-x" . counsel-M-x)
      ("C-x C-m" . counsel-M-x)
      ("C-x C-f" . counsel-find-file)
      ("C-x c k" . counsel-yank-pop))

#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp

  (use-package ivy
      :bind
      ("C-x s" . swiper)
      ("C-x C-r" . ivy-resume)
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers nil)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))

#+END_SRC

** Which Key
   #+BEGIN_SRC emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))

#+END_SRC
** Elisp Files
#+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path (concat user-emacs-directory "elisp"))
 #+END_SRC

* Discord Rich Presence
** Discord Emacs
    #+BEGIN_SRC emacs-lisp
(use-package elcord
  :config
  (elcord-mode))
     #+END_SRC

* LSP
** lsp-mode
#+BEGIN_SRC emacs-lisp

(load-file "~/.emacs.d/elisp/LSP/lsp-mode.el")

#+END_SRC

** lsp-treemacs
   
   #+BEGIN_SRC emacs-lisp

(load-file "~/.emacs.d/elisp/LSP/lsp-treemacs.el")

   #+END_SRC

** lsp-ui

   #+BEGIN_SRC emacs-lisp

(load-file "~/.emacs.d/elisp/LSP/lsp-ui.el")

   #+END_SRC

* Autocomplete
** Company
#+BEGIN_SRC emacs-lisp

(load-file "~/.emacs.d/elisp/Autocomplete/company.el")

#+END_SRC

* Sintax Check
** Flycheck

   #+BEGIN_SRC emacs-lisp
   
(use-package flycheck
    :hook (lsp-deferred . flycheck-mode))

    #+END_SRC

* Language
** Web
*** Frontend
**** TypeScript
   #+BEGIN_SRC emacs-lisp
  ;;(load-file "~/.emacs.d/elisp/Language/Web/Frontend/typescript.el")
  #+END_SRC
  
**** JavaScript
   #+BEGIN_SRC emacs-lisp
   ;;(load-file "~/.emacs.d/elisp/Language/Web/Frontend/javascript.el") 
  #+END_SRC

**** Vue.js
  #+BEGIN_SRC emacs-lisp
 ;;(load-file "~/.emacs.d/elisp/Language/Web/Frontend/vue.el")
  #+END_SRC
  
*** Backend
**** PHP
  #+BEGIN_SRC emacs-lisp

;; (load-file "~/.emacs.d/elisp/Language/Web/Backend/php.el")

  #+END_SRC

**** Go
  #+BEGIN_SRC emacs-lisp

;; (load-file "~/.emacs.d/elisp/Language/Web/Backend/go.el")

  #+END_SRC
  
** General Programing
*** C/C++

   #+BEGIN_SRC emacs-lisp

;;(load-file "~/.emacs.d/elisp/Language/Low Level/c-c++.el")

    #+END_SRC
    
*** Rust    
   #+BEGIN_SRC emacs-lisp

;;(load-file "~/.emacs.d/elisp/Language/Low Level/rust.el")

    #+END_SRC

** Hight Level Programing
*** Python
    #+BEGIN_SRC emacs-lisp

;;(load-file "~/.emacs.d/elisp/Language/High Level/python.el")

    #+END_SRC
*** Lua
     #+BEGIN_SRC emacs-lisp
     
;;(load-file "~/.emacs.d/elisp/Language/High Level/lua.el")

         #+END_SRC
*** Ruby

  #+BEGIN_SRC emacs-lisp

;;(load-file "~/.emacs.d/elisp/Language/High Level/ruby.el")

  #+END_SRC
** Functional Programing
*** Haskell

   #+BEGIN_SRC emacs-lisp

;;(load-file "~/.emacs.d/elisp/Language/Functional Programing/haskell.el")

   #+END_SRC

* GUI
** Guiclassic
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (menu-bar-mode -1)
   #+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp

 (load-file "~/.emacs.d/elisp/GUI/theme.el")

#+END_SRC 
** Centaur Tabs
#+BEGIN_SRC emacs-lisp
  
(load-file "~/.emacs.d/elisp/GUI/centaurtabs.el")

#+END_SRC 
** Treemacs
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/elisp/GUI/treemacs.el")
#+END_SRC 
** Dashboard
#+BEGIN_SRC emacs-lisp
 
(load-file "~/.emacs.d/elisp/GUI/dashboard.el")

#+END_SRC 
** Modeline
#+BEGIN_SRC emacs-lisp

(load-file "~/.emacs.d/elisp/GUI/modeline.el")

#+END_SRC 
** Font
#+BEGIN_SRC emacs-lisp

(load-file "~/.emacs.d/elisp/GUI/font.el")

#+END_SRC 

** Display
***  Number
#+BEGIN_SRC emacs-lisp

(load-file "~/.emacs.d/elisp/GUI/displaynumber.el")

#+END_SRC

