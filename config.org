#+TITLE: Config General

* Initial Setup
** Base  
#+BEGIN_SRC emacs-lisp

  (require 'package)

    (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
		  ("org" . "https://orgmode.org/elpa/")
		 ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)

  (setq backup-directory-alist `(("." . "~/.saves")))

  (setq skeleton-pair t)
  (global-set-key "[" 'skeleton-pair-insert-maybe)
  (global-set-key "(" 'skeleton-pair-insert-maybe)
  (global-set-key "{" 'skeleton-pair-insert-maybe)
  (global-set-key "'" 'skeleton-pair-insert-maybe)
  (global-set-key "\"" 'skeleton-pair-insert-maybe)

(add-to-list 'load-path (concat user-emacs-directory "elisp"))

#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp

  (use-package counsel
      :bind
      ("M-x" . counsel-M-x)
      ("C-x C-m" . counsel-M-x)
      ("C-x C-f" . counsel-find-file)
      ("C-x c k" . counsel-yank-pop))

#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp

  (use-package ivy
      :bind
      ("C-x s" . swiper)
      ("C-x C-r" . ivy-resume)
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers nil)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))

#+END_SRC

** Which Key
   #+BEGIN_SRC emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))

#+END_SRC
** Elisp Files
#+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path (concat user-emacs-directory "elisp"))
 #+END_SRC
* RPC
** RPC
    #+BEGIN_SRC emacs-lisp
      (load-file "~/.emacs.d/elisp/discord-emacs.el")
      (discord-emacs-run "384815451978334208")
     #+END_SRC
* Git
** Magit
   #+BEGIN_SRC emacs-lisp

  (use-package magit
    :bind (("C-x g" . magit-status)
	   ("C-M-;" . magit-status)))

  (use-package magit-todos
    :defer t)

   #+END_SRC

* LSP
** lsp-mode
#+BEGIN_SRC emacs-lisp

  (use-package lsp-mode
    :defer t
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

#+END_SRC

** lsp-treemacs

   #+BEGIN_SRC emacs-lisp

     (use-package lsp-treemacs
      :after lsp)

   #+END_SRC

** lsp-ui

   #+BEGIN_SRC emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

   #+END_SRC

* Autocomplete
** Company
#+BEGIN_SRC emacs-lisp

  (add-hook 'after-init-hook 'global-company-mode)
  (use-package company
    :after lsp-mode
    ;; :hook (after-init-hook . global-company-mode)
    :config
    (company-tng-mode 0)
    :custom (company-minimum-prefix-length 2)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
	  (:map lsp-mode-map
		("<tab>" . company-indent-or-complete-common)))


    (use-package company-anaconda 
      :defer
      :after company
      :config (add-to-list 'company-backends 'company-anaconda))

     (require 'company-lsp)
      (push 'company-lsp company-backends)

#+END_SRC
* Sintax Check
** Flycheck

   #+BEGIN_SRC emacs-lisp
   
(use-package flycheck
    :hook (lsp-deferred . flycheck-mode))

    #+END_SRC

* Language
** Web
*** Frontend
**** TypeScript
#***** Lisp
   #+BEGIN_SRC emacs-lisp
   (use-package typescript-mode
     :mode "\\.ts\\'"                      
     :hook (typescript-mode . lsp-deferred) 
     :config                                
   (setq typescript-indent-level 2))
  #+END_SRC
  
**** JavaScript
   #+BEGIN_SRC emacs-lisp
   (use-package js2-mode
     :mode "\\.js\\'"
     :hook (js2-mode . lsp-deferred))  
  #+END_SRC

**** HTML
   #+BEGIN_SRC emacs-lisp
    (use-package web-mode 
        :hook (html-mode . lsp-deferred)) 
  #+END_SRC

**** CSS
     
   #+BEGIN_SRC emacs-lisp
   (use-package css-mode
     :hook (css-mode . lsp-deferred))
  #+END_SRC   

#**** Vue.js

  #+BEGIN_SRC emacs-lisp

 (use-package vue-mode
   :mode "\\.vue\\'"
   :config
    (add-hook 'vue-mode-hook #'lsp))

  #+END_SRC
  
*** Backend
**** PHP
#***** Lisp
  #+BEGIN_SRC emacs-lisp

  (use-package company-php
  :defer
  :after company)

  #+END_SRC

**** Go
#***** Lisp
  #+BEGIN_SRC emacs-lisp

  (use-package go-mode
   :mode "\\.go\\'"
   :config
    (add-hook 'go-mode-hook #'lsp))

  #+END_SRC
  
** Low Level Programing
*** C/C++
#**** Lisp
   #+BEGIN_SRC emacs-lisp

     (use-package c-mode
       :ensure nil
       :hook (c-mode . lsp-deferred))

    #+END_SRC
    
*** Rust
#**** Lisp
    
   #+BEGIN_SRC emacs-lisp

   (use-package rustic
    :mode ("\\.rs\\'" . rustic-mode)
    :hook (rustic-mode . lsp-deferred))

    #+END_SRC

** Hight Level Programing
*** Python
#**** Lisp
    #+BEGIN_SRC emacs-lisp

   (use-package python-mode
     :ensure t
       :defer t
        :hook (python-mode . lsp-deferred)
        :custom
     (python-shell-interpreter "python3"))

  (setq python-shell-interpreter "python3")

    #+END_SRC
*** Lua
#**** Lisp
     #+BEGIN_SRC emacs-lisp
     
    (use-package lua-mode
     :ensure t)

    (use-package company-lua
      :ensure t)

         #+END_SRC
*** Ruby
#**** Lisp
  #+BEGIN_SRC emacs-lisp

    (use-package robe 
      :ensure t
      :after company
      :config (add-to-list 'company-backends 'company-robe)
	    (add-hook 'ruby-mode-hook 'robe-mode))

  #+END_SRC
** Functional Programing
*** Haskell
#**** Lisp
   #+BEGIN_SRC emacs-lisp

     (use-package haskell-mode
	    :hook (haskell-mode . #'lsp-deferred)
	    :hook (haskell-literate-mode . #'lsp-deferred))
	  (use-package lsp-haskell)
	  ;; loading and unloading is slow, so just disabling
	  (with-eval-after-load "flycheck"
	    (add-to-list 'flycheck-disabled-checkers 'haskell-stack-ghc))

   #+END_SRC

* GUI
** Guiclassic
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (menu-bar-mode -1)
   #+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp

  (use-package doom-themes
  :config
  (load-theme 'doom-city-lights t))

#+END_SRC 
** Centaur Tabs
#+BEGIN_SRC emacs-lisp
  
  (use-package centaur-tabs
   :ensure t
   :config 
   (setq  centaur-tabs-set-bar 'under
	  x-underline-at-descent-line t
          centaur-tabs-style "bar"
          centaur-tabs-set-icons t
          centaur-tabs-gray-out-icons 'buffer
          centaur-tabs-height 40
          centaur-tabs-set-modified-marker t
          centaur-tabs-modifier-marker "*")
   (centaur-tabs-mode t))

#+END_SRC 
** Treemacs
#+BEGIN_SRC emacs-lisp

  (use-package treemacs
    :ensure t
    :bind
    (:map global-map
	  ([f8] . treemacs-select-window)
	  ("C-<f8>" . treemacs))
    :config
    (setq treemacs-is-never-other-window t))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-all-the-icons
    :ensure t)

  (treemacs-load-theme "all-the-icons")
  (setq doom-themes-treemacs-theme "doom-colors")

(dolist (mode '(treemacs-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC 
** Dashboard
#+BEGIN_SRC emacs-lisp
 
 (use-package dashboard
  :config
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-center-content nil)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-startup-banner "~/.emacs.d/logo/logo.png")
  (setq dashboard-banner-logo-title "In memory of a great, Kentar≈ç Miura"))
  (dashboard-setup-startup-hook)

#+END_SRC 
** Modeline
#+BEGIN_SRC emacs-lisp

(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))

#+END_SRC 
** Font
#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil
                    :family "Iosevka SS09"
                    :height 120)

#+END_SRC 

** Display
***  Number
#+BEGIN_SRC emacs-lisp

(use-package display-line-numbers
  :ensure nil
  :hook
  ((prog-mode yaml-mode systemd-mode) . display-line-numbers-mode))

#+END_SRC

